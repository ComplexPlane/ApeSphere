# ApeSphere REL Loader
# Based on the TTYD-Practice-Codes REL loader written by PistonMiner and Zephiles

# 80006d10 - Address to hook for this code
# This is after mkb2.main_loop.rel is loaded and linked, but before its prolog runs

# TODO deal with having no heap
# TODO load from slot B
# TODO investigate card fast mode?

# TODO restart register usage from r31 and reorder?
# TODO consistent capitalization?
# TODO consistent blrl/bctr?
# TODO recomment some things, related to stack usage for example
# TODO include stack layout in comments in this file?
# TODO initialize register assignments to pointers on stack in one place?

# Stack Layout
# | Size                   | Offset | Size   | Alignment |
# | ---------------------- | ------ | ------ | --------- |
# | CARDMount work area    | 0x220  | 0xa000 | 32        |
# | Small card file buffer | 0x20   | 0x200  | 32        |
# | CardFileInfo           | 0xc    | 0x14   |           |
# | "rel" string           | 0x8    | 0x4    |           |
# | LR Save                | 0x4    | 0x4    |           |
# | SP Save                | 0x0    | 0x4    |           |

# Register Assignments
# r28: Used to preserve r12 from hook point, which is the prolog function of the main_loop rel
# r27: REL prolog pointer, initially 0. Keeps track of whether a REL is loaded or not
# r26: CardFileInfo struct buffer, allocated on stack
# r25: REL module size, rounded up to multiple of 0x200 bytes
# r24: Card file buffer, allocated on stack
# r23: CARDMount work area, allocated on stack
# r22: REL module region, allocated on arena
# r21: REL BSS buffer, allocated on arena
# r20: Original arena low pointer
# r19: Pointer to "rel" on stack

# Save r12 from hook point
mr r28,r12

# Used to check if a REL file is loaded or not
li r27,0

# Make stack frame
lis r3,0xffff
ori r3,r3,0x5de0 # -0xa220
stwux r1,r1,r3

# Initialize stack buffer pointers
addi r23,r1,0x220 # CARDMount work area
addi r24,r1,0x20 # Small card file buffer
addi r26,r1,0xc # CardFileInfo
addi r19,r1,0x8 # "rel"

# Write "rel" string (file name) to stack
lis r3,0x7265
ori r3,r3,0x6c00
stw r3,0x0(r19)

# Save original arena low pointer
lis r3,0x8000
ori r3,r3,0xd590 # OSGetArenaLo
mtctr r3
bctrl
mr r20,r3 # Save address for later

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r6,0x000F
ori r6,r6,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
lis r3,0x8002
ori r3,r3,0x611c # CARDProbeEx
mtlr r3
li r3,0 # Memory Card Slot A
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r6,r6,1
bgt+ checkForMemoryCardLoop
b exit

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Mount the Memory Card
lis r3,0x8002
ori r3,r3,0x67b0 # CARDMountAsync
mtlr r3
li r3,0 # Memory Card Slot A
mr r4,r23 # Pointer to the card Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
li r6,0 # Attach Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- exit

# Open the file
lis r3,0x8002
ori r3,r3,0x74fc # CARDOpen
mtlr r3
li r3,0 # Memory Card Slot A
mr r4,r19 # File Name ("rel" on stack)
mr r5,r26 # Pointer to CardFileInfo
blrl
cmpwi r3,0 # Check if something went wrong
bne- unmountMemoryCard

# Read from the Card
lis r3,0x8002
ori r3,r3,0x7cb4 # CARDReadAsync
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
li r5,0x200 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- unmountMemoryCard

# Get the REL module size and adjust it to be in multiples of 0x200 bytes
lwz r25,0x40(r24) # Module Size
addi r25,r25,511
rlwinm r25,r25,0,0,22

# Allocate buffer for the REL based on the adjusted module size
mr r3,r25
bl allocateOnArena
mr r22,r3 # Backup for later

# Read the REL Area of the file
lis r3,0x8002
ori r3,r3,0x7cb4 # CARDReadAsync
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r22 # Pointer to the REL Module Buffer
mr r5,r25 # Adjusted REL Module Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- restoreArena

# Get the BSS Area size and allocate memory for it
lwz r3,0x20(r22)
bl allocateOnArena
mr r21,r3 # Backup for later

# Overwrite the REL version from 3 to 2.
# elf2rel produces RELs with version 3, but SMB2 only accepts rels with version < 3
# TODO support v2 in elf2rel?
li r3,0x2
stw r3,0x1c(r22)

# Link the functions in the REL
lis r3,0x8001
ori r3,r3,0x0730 # OSLink
mtlr r3
mr r3,r22 # Pointer to the REL module buffer
mr r4,r21 # Pointer to the BSS Area
blrl
cmpwi r3,1 # Check if something went wrong
bne- unlinkRel

lwz r3,0x34(r22) # Get the REL Prolog Pointer
cmpwi r3,0
beq- unlinkRel # If it's 0 for some reason, unlinkRel
mr r27,r3 # Store REL prolog pointer

# Done loading REL, so unmount memory card, run prolog, and exit
b unmountMemoryCard

# 
# Common functions
#

allocateOnArena:
lis r4,0x8000
ori r4,r4,0xd5a8 # OSAllocFromArenaLow
mtctr r4
addi r3,r3,31
rlwinm r3,r3,0,0,26 # Amount to allocate, rounded up to multiple of 32 bytes
li r4,32 # Alignment
bctr

finishAsyncFunction:
cmpwi r3,0 # Check if something went wrong
bnelr-
mflr r14

finishAsyncFunctionLoop:
lis r3,0x8002
ori r3,r3,0x33e4 # CARDGetResultCode
mtlr r3
li r3,0 # Memory Card Slot A
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncFunctionLoop
mtlr r14
blr

#
# Error handling branch points
#

# Unlink the REL if it failed to link
unlinkRel:
lis r3,0x8001
ori r3,r3,0x0b8c # OSUnlink
mtlr r3
mr r3,r22 # Pointer to the Module
blrl

# Restore the arena low pointer if we cannot load the REL
restoreArena:
lis r3,0x8000
ori r3,r3,0xd5a0 # OSSetArenaLo
mtctr r3
mr r3,r20
bctrl

#
# Unmount memory card, run REL prolog, and exit
#

# Unmount the Memory card
#
# We don't call CARDClose() on our file because this function seemingly does
# not appear in SMB2. Since ths function is never called by the game, it must
# not be _that_ big of a deal to unmount the card without closing the file.
unmountMemoryCard:
lis r3,0x8002
ori r3,r3,0x69ec # CARDUnmount
mtlr r3
li r3,0 # Memory Card Slot A
blrl

# Run the REL Prolog if the load was successful
cmpwi r27,0
beq- exit
mtlr r27
blrl

# Restore stack pointer
exit:
lwz r1,0x0(r1)

# Restore intruction replaced by hook
# Original instruction was: mtctr r12
mtctr r28

# vim:ft=asm
