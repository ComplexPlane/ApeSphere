# Code created by PistonMiner and Zephiles

# 800710F4 - Address to hook for this code

# Initialize static values used for addresses
lis r31,0x8000
lis r30,0x8003
lis r29,0x8029
lis r28,0x802B

li r27,0 # Used to check if a REL file is loaded or not

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r26,0x000F
ori r26,r26,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
ori r3,r28,0x3610 # CARDProbeEx
mtlr r3
li r3,0 # Memory Card Slot A
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r26,r26,1
bgt+ checkForMemoryCardLoop
b exit

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Mount the Memory Card
ori r3,r28,0x3D18 # CARDMountAsync
mtlr r3
li r3,0 # Memory Card Slot A
lwz r4,0x1C78(r13)
lwz r4,0x4(r4) # Pointer to the Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
li r6,0 # Attach Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- exit

# Allocate memory for CardFileInfo
li r4,20
bl allocateMemory

# Backup the returned address to be used for later
mr r26,r3

# Open the file
ori r3,r28,0x4C58 # CARDOpen
mtlr r3
li r3,0 # Memory Card Slot A
ori r4,r31,0x40DC # File Name
mr r5,r26 # Pointer to CardFileInfo
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCardFileInfo

# Allocate 0x200 bytes of memory, as the read size must be in multiples of 0x200 bytes
li r4,0x200 # Bytes to allocate
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read from the Card
ori r3,r28,0x5408 # CARDReadAsync
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
li r5,0x200 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the file size and adjust it to be in multiples of 0x200 bytes
lwz r25,0x40(r24) # File Size
addi r25,r25,511
rlwinm r25,r25,0,0,22

# Free the 0x200 bytes from earlier
mr r4,r24
bl freeMemory

# Allocate more bytes based on the adjusted file size
mr r4,r25
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read the REL Area of the file
ori r3,r28,0x5408 # CARDReadAsync
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
mr r5,r25 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the BSS Area size and allocate memory for it
lwz r4,0x20(r24)
bl allocateMemory

# Backup the returned address to be used for later
mr r25,r3

# Link the functions in the REL
ori r3,r29,0xE930 # OSLink
mtlr r3
mr r3,r24 # Pointer to the Module
mr r4,r25 # Pointer to the BSS Area
blrl
cmpwi r3,1 # Check if something went wrong
bne- freeRemainingMemory

# Store the BSS Area and the Module
stw r25,0x414C(r31) # Pointer to the BSS Area
stw r24,0x4150(r31) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r27,0x34(r24)

# Done, so close and unmount the card
b closeCard

# Function definitions, error handling, etc.
freeMemory:
ori r3,r30,0x01AC # __memFree
mtctr r3
li r3,0 # Heap to use
bctr

allocateMemory:
ori r3,r30,0x01D8 # __memAlloc
mtctr r3
li r3,0 # Heap to use
bctr

finishAsyncFunction:
cmpwi r3,0 # Check if something went wrong
bnelr-
mflr r14

finishAsyncFunctionLoop:
ori r3,r28,0x07C0 # CARDGetResultCode
mtlr r3
li r3,0 # Memory Card Slot A
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncFunctionLoop
mtlr r14
blr

freeRemainingMemory:
ori r3,r29,0xEB8C # OSUnlink
mtlr r3
mr r3,r24 # Pointer to the Module
blrl

# Free the BSS Area and the File Buffer
mr r4,r25 # Pointer to the BSS Area
bl freeMemory

freeCurrentMemoryArea:
mr r4,r24 # Pointer to the File Buffer or the 0x200 Bytes Buffer
bl freeMemory

closeCard:
ori r3,r28,0x4D74 # CARDClose
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
blrl

freeCardFileInfo:
mr r4,r26
bl freeMemory

# Unmount the Memory Card
ori r3,r28,0x3F54 # CARDUnmount
mtlr r3
li r3,0 # Memory Card Slot A
blrl

# Run the REL Prolog if the load was successful
cmpwi r27,0
beq- exit
mtlr r27
blrl

exit:
# Add back in the overwritten instruction
li r3,0